# Service Manager
#
# Services are system processes running in the background which wait for
# incoming requests. When a process wants to communicate with a service, it
# first needs to get a handle to the named service, and then it can communicate
# with the service via inter-process communication (each service has a name up
# to 8 characters).
#
# Handles for services are retrieved from the service manager port, "sm:", and
# are released via svcCloseHandle or when a process is terminated or crashes.
#
# Manager service "sm:m" allows the Process Manager to tell sm: about the
# permissions of each process. By default, SM assumes a process has no
# permissions, and as such cannot access any service. "sm:m" RegisterProcess
# calls allows PM to tell the Service Manager about which services a certain
# process is allowed to access or host.
#
# A Service is very similar to a kernel-managed Named Port: You can connect to
# it, and it returns a ClientSession. The difference is that a Service handled
# by "sm:" has an additional permission check done to ensure it isn't accessed
# by an unprivileged process.
interface sunrise_libuser::sm::IUserInterface is @managedport sm: {
    # Returns a handle to the given service. IPC messages may be sent to this
    # handle through `svcSendSyncRequest`.
    [1] get_service(u64 name) -> KHandle<move, client_session>;
    # Registers a service with the given name. The user can use
    # `svcAcceptSession` on the returned handle to get a new Session handle, and
    # use `svcReplyAndReceive` on those handles to reply to IPC requests.
    [2] register_service(u64 name, bool is_light, u32 max_handles) -> KHandle<move, server_port>;
}