# Main ahci interface.
#
# Can communicate the number of discovered devices,
# and get an interface to a specific device.
interface sunrise_libuser::ahci::AhciInterface is ahci: {
	# Asks to the ahci service how many disks it has discovered.
	#
	# [get_disk] accepts disk ids in `0..discovered_disks_count()`.
	#
	# [get_disk]: AhciInterface::get_disk
	[0] discovered_disks_count() -> u32;
	# Gets the interface to a disk.
	#
	# This creates a session connected to an [IDisk].
	#
	# `disk_id` should be in `0..discovered_disk_count()`.
	[1] get_disk(u32 disk_id) -> object<sunrise_libuser::ahci::IDisk>;
}

# Interface to an AHCI device.
#
# It can:
#
# - get the number of addressable 512-octet sectors on this disk,
# - read a range of consecutive sectors.
# - write a range of consecutive sectors.
interface sunrise_libuser::ahci::IDisk {
	# Retrieves the number of addressable 512-octet sectors on this disk.
	[0] sector_count() -> u64 sectors;

	# Reads sectors from the disk.
	#
	# This IPC call will invoke the AHCI driver and make it copy `sector_count` sectors from the disk
	# to the memory pointed to by `handle`.
	# You should map `handle` in your process to access the copied data.
	#
	# # Error
	#
	# - The handle should contain a buffer at least `sector_count * 512` octets in size.
	# - `mapping_size` should reflect the size of `handle`.
	# - `address..address+sector_count` should be in the range `0..IDisk.sector_count()`.
	[1] read_dma(KHandle<copy, shared_memory>, u64 mapping_size, u64 address, u64 sector_count);

	# Writes sectors to the disk.
	#
	# This IPC call will invoke the AHCI driver and make it copy `sector_count` sectors to the disk
	# from the memory pointed to by `handle`.
	# You should map `handle` in your process first to fill the data to be copied.
	#
	# # Error
	#
	# - The handle should contain a buffer at least `sector_count * 512` octets in size.
	# - `mapping_size` should reflect the size of `handle`.
	# - `address..address+sector_count` should be in the range `0..IDisk.sector_count()`.
	[2] write_dma(KHandle<copy, shared_memory>, u64 mapping_size, u64 address, u64 sector_count);
}
